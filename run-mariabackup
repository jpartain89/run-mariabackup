#!/usr/bin/env bash
# shellcheck disable=SC2086
set -e

# Create a backup user
# GRANT RELOAD, LOCK TABLES, REPLICATION CLIENT ON *.* TO 'backup'@'localhost' identified by 'YourPassword';
# FLUSH PRIVILEGES;
#
# Usage:
# MYSQL_PASSWORD=YourPassword bash run-mariabackup

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PROGRAM_NAME="run-mariabackup"
VERSION="1.0.0"

# Setting blank or default variables for world-usability
# Definitely use a separate config file, please!
# We'll be looking for the config file in three places:
## /etc/run-mariabackup.conf
## /etc/run-mariabackup/run-mariabackup.conf
## ~/.config/run-mariabackup.conf
# In that order

MYSQL_USER=""
MYSQL_PASSWORD=""
MYSQL_HOST="localhost"
MYSQL_PORT="3306"
BACKCMD="mariabackup"
BACKDIR="/backup/default"
# Create a new full backup every X seconds
FULLBACKUPCYCLE="604800"
# Number of additional backups cycles a backup should be kept for.
KEEP="3"

USEROPTIONS="--user=${MYSQL_USER} \
    --password=${MYSQL_PASSWORD} \
    --host=${MYSQL_HOST} \
    --port=${MYSQL_PORT}"
ARGS=""

function die() {
    echo "${PROGRAM_NAME}: ${1}" >&2
    exit "${2:-1}"
}

# This "auto-installs" the program into /usr/local/bin for ya!
command -v "$PROGRAM_NAME" 1>/dev/null 2>&1 || {
    (
        if [ -x "${DIR}/${PROGRAM_NAME}" ]; then
            sudo ln -svf "${DIR}/${PROGRAM_NAME}" "/usr/local/bin/${PROGRAM_NAME}"
            sudo chmod -R 0775 "/usr/local/bin/${PROGRAM_NAME}"
        else
            echo "For some reason, linking ${PROGRAM_NAME} to /usr/local/bin,"
            echo "failed. My apologies for not being able to figure it out..."
            exit 1
        fi
    )
}

function testing() {
# This block tests for the existence of the needed configuration file
if [ -f "${CONFIG_LOCATION}" ]; then
    . "${CONFIG_LOCATION}"
elif [ -f "/etc/${PROGRAM_NAME}.conf" ]; then
    . "/etc/${PROGRAM_NAME}.conf"
elif [ -f "/etc/${PROGRAM_NAME}/${PROGRAM_NAME}.conf" ]; then
    . "/etc/${PROGRAM_NAME}/${PROGRAM_NAME}.conf"
elif [ -f "${HOME}/.config/${PROGRAM_NAME}.conf" ]; then
    . "${HOME}/.config/${PROGRAM_NAME}.conf"
else
    cat << EOF
We couldn't find the ${PROGRAM_NAME}.conf configuration file that we require to run!
The file is looked for at:

    /etc/${PROGRAM_NAME}.conf
            - or -
    /etc/${PROGRAM_NAME}/${PROGRAM_NAME}.conf
            - or -
    ~/.config/${PROGRAM_NAME}.conf

This repo has a configuration file example that you can key off of for what you need to fill out.

Exiting now.
EOF
    exit 1
fi

BASEBACKDIR="${BACKDIR}/base"
INCRBACKDIR="${BACKDIR}/incr"
START=$(date +"%Y")
DATEDIR=$(date +"%F_%H-%M-%S")
}
# This tests for gnu-getopt, as thats needed to run
if [[ "$(uname)" == "Darwin" ]]; then
  if [ -f /usr/local/opt/gnu-getopt/bin/getopt ]; then
    GETOPT="/usr/local/opt/gnu-getopt/bin/getopt"
      if [ "$("$GETOPT" --test; echo $?)" != 4 ]; then
        die "You seem to have the wrong version of gnu-getopt?
        Please investigate and have the proper one installed."
      fi
  else
    die "Seems you're missing the required gnu-getopt program.
    Please install using brew install gnu-getopt."
  fi
else
  if [[ "$(getopt --test; echo $?)" != 4 ]]; then
    die "You seem to have the wrong version of gnu-getopt...
      Please investigate how to fix this issue before re-attempting
      the use of this script."
  else
    GETOPT="$(command -v getopt)"
  fi
fi

function help() {
echo "${PROGRAM_NAME} [ -b | --backup ] or [ -r | --restore ] or [ -h | --help ]

    -b | --backup  :  Running our backups, though I do not believe it can
                      handle an original, full backup at this time. You
                      might have to manually handle that, for now.
    -r | --restore :  Running a restoration, it'll run through every backup
                      location that currently exists in your backup location
                      and then will copy-write it to your data directory location.

    This is for us to run mariabackup automatically, programatically and incrementally. 
    (since its rather difficult, with a ton of manual typing or copy-pasting without a script!)

    I've also added in the ability to restore your incremental backups, but it'll 
    restore all of the incremental backups that are in your backup directory. If 
    there is an incremental backup you don't want to utilize, move or remove 
    the directory.

    Make sure you setup your configuration file. We'll be looking:

    /etc/${PROGRAM_NAME}.conf
            - or -
    /etc/${PROGRAM_NAME}/${PROGRAM_NAME}.conf
            - or -
    ~/.config/${PROGRAM_NAME}.conf

"
}

function checks() {
## This is for checking if various directories exist, and if not, create them
## and/or throw up errors and exit the script if stuff doesn't work right

    if [[ ! -d "${BASEBACKDIR}" ]]; then
        mkdir -p "${BASEBACKDIR}"
    fi

    # Check base dir exists and is writable
    if [[  ! -d "${BASEBACKDIR}" || ! -w "${BASEBACKDIR}" ]]; then
        die "${BASEBACKDIR} does not exist or is not writable"
        exit 1
    fi

    if [[  ! -d "${INCRBACKDIR}" ]]; then
        mkdir -p "${INCRBACKDIR}"
    fi

    # check incr dir exists and is writable
    if  [[ ! -d "${INCRBACKDIR}" || ! -w "${INCRBACKDIR}" ]]; then
        die "${INCRBACKDIR} does not exist or is not writable"
        exit 1
    fi

    if [[ $(/usr/bin/mysql -s ${USEROPTIONS} -e"quit") ]]; then
        die "HALTED: Supplied mysql username or password appears to be incorrect (not copied here for security, see script)"
        exit 1
    fi

    echo "Check completed OK"
}

function backup() {
    # This finds the main, base backup directory that should contain the
    # 'full' and original backup we completed.
    LATEST=$(find ${BASEBACKDIR} -mindepth 1 -maxdepth 1 -type d -printf "%P\n" | sort -nr | head -1)

    # Stats current age of the existing directory
    AGE=$(stat -c %Y "${BASEBACKDIR}/${LATEST}")

    # Create an incremental backup
    if [[ "${LATEST}" ]] && [[ $(( AGE + FULLBACKUPCYCLE + 5 )) -ge ${START} ]]; then
        echo "We are creating an incremental backup"
        # Check that `incr` sub directory exists
        # try to create if not
        if  [[ ! -d "${INCRBACKDIR}/${LATEST}" ]] ; then
            mkdir -p "${INCRBACKDIR}/${LATEST}"
        fi

        # Check `incr` sub directory BOTH exists and is writable
        if [[  ! -d "${INCRBACKDIR}/${LATEST}" || ! -w "${INCRBACKDIR}/${LATEST}" ]]; then
            die "${INCRBACKDIR}/${LATEST} does not exist or is not writable"
        fi

        # Assigns the now-found `incr` sub directory
        LATESTINCR=$(find "${INCRBACKDIR}/${LATEST}" -mindepth 1 -maxdepth 1 -type d | sort -nr | head -1)

        if [ ! "$LATESTINCR" ]; then
            # This is the first, MAIN backup
            INCRBASEDIR="${BASEBACKDIR}/${LATEST}"
        else
            # This is a 2+ incremental backup
            INCRBASEDIR="${LATESTINCR}"
        fi

        TARGETDIR="${INCRBACKDIR}/${LATEST}/${DATEDIR}"
        mkdir -p "${TARGETDIR}"

        # Create incremental Backup
        sudo ${BACKCMD} \
            --backup \
            ${USEROPTIONS} \
            ${ARGS} \
            --extra-lsndir=${TARGETDIR} \
            --incremental-basedir=${INCRBASEDIR} \
            --stream=xbstream | gzip > ${TARGETDIR}/backup.stream.gz
    else
        echo "New full backup"

        TARGETDIR="${BASEBACKDIR}/${DATEDIR}"
        mkdir -p "${TARGETDIR}"

        # Create a new full backup
        sudo ${BACKCMD} \
            --backup \
            ${USEROPTIONS} \
            ${ARGS} \
            --extra-lsndir=${TARGETDIR} \
            --stream=xbstream | gzip > ${TARGETDIR}/backup.stream.gz
    fi

    MINS=$(( FULLBACKUPCYCLE * (KEEP + 1 ) / 60 ))
    echo "Cleaning up old backups (older than ${MINS} minutes) and temporary files"

    # Delete old backups
    while IFS= read -r line; do
        echo "deleting ${line}"
        rm -rf "${BASEBACKDIR:?}/${line}"
        rm -rf "${INCRBACKDIR:?}/${line}"
    done < <(find ${BASEBACKDIR} -mindepth 1 -maxdepth 1 -type d -mmin +${MINS} -printf "%P\n")
}

function restore() {
    # This finds the main, base backup directory that should contain the `full`
    # original backup we completed.
    LATEST=$(find ${BASEBACKDIR} -mindepth 1 -maxdepth 1 -type d -printf "%P\n" | sort -nr | head -1)

    # This finds and then sorts the backups
    INCREMENTAL_ORDER=$(find ${INCRBACKDIR}/${LATEST} -mindepth 1 -maxdepth 1 -type d -print0 | xargs -0 ls -d | sort -V)

    # The backups are stored in a compressed state. This uncompresses them.
    echo "Decompressing the original, full backup first."
    while IFS= read -r line; do
        mkdir -p "${line}/backup"
        zcat "${line}/backup.stream.gz" | mbstream -x -C "${line}/backup/"
    done < <(find "${BACKDIR}" -iname backup.stream.gz | grep "${LATEST}" | xargs dirname)

    echo "Next, we run the prepare steps on the original backup files and the remaining incremental backup files."

    # This is building the base of the restore command, used for preparing
    # the main, full backup directory first
    BACKCMD_RESTORE="${BACKCMD} --prepare --target-dir ${BACKDIR}/base/${LATEST}/backup/ ${USEROPTIONS} --apply-log-only"
    # This addition is for the subsequent incremental backups that we still
    # have on the filesystem
    BACKCMD_INCR_RESTORE="${BACKCMD_RESTORE} --incremental-dir "

    # Run the first `restore` line for the main backup files
    "${BACKCMD_RESTORE}"
    # This for loop is to, in order, incrementally restore the backup files
    while IFS= read -r lines; do
        for incr in $lines; do
            echo "Working on ${INCREMENTAL_ORDER} directory."
            "${BACKCMD_RESTORE} --incremental-dir ${incr}/backup/"
        done
    done < <("${INCREMENTAL_ORDER}")

    read -r "Do you want to proceed with moving the files to production?" confirm

    if [[ "${confirm}" == "[ y|Y ]" ]]; then
        echo "Now stopping mariadb from running to move the files in place."
        sudo systemctl stop mariadb.service

        echo "Next, moving the existing database files out of the way."
        sudo mv "${DATADIR}" "${DATADIR}_bak"

        echo "And, the copy-back step"
        "${BACKCMD}" --copy-back --target-dir "${BACKDIR}/base/${LATEST}/backup/${USEROPTIONS}" --datadir "${DATADIR}"

        echo "Fixing the permissions for the new data files"
        sudo chown -R mysql:mysql "${DATADIR}"

        echo "And starting mariadb service"
        sudo systemctl start mariadb.service
    fi
}

# We are using getopt for our CLI
SHORT=brhc;
LONG=backup,restore,help,config:

OPTS=$(${GETOPT} --options ${SHORT} --long ${LONG} --name "$0" -- "$@")

if [ $# == 0 ]; then
    help && exit 1
fi

if [ $? != 0 ] ; then
    die "Failed to parse options...exiting." >&2
fi

eval set -- "${OPTS}"

while true; do
    case "$1" in
        -c | --config )
            shift
            CONFIG_LOCATION="$1"
            shift;;
        -b | --backup )
            testing
            checks
            backup
            exit 0;;
        -r | --restore )
            testing
            checks
            restore
            exit 0;;
        -h | --help )
            testing
            help
            exit 0;;
        * )
            testing
            help
            exit 0;;
    esac
done

exit 0
